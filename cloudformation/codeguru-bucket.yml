AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create a private S3 bucket for CodeGuru Reviewer'

Resources:
  # S3 Bucket Definition
  CodeGuruReviewerBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    DependsOn: EmptyS3BucketCustomResource
    Properties:
      BucketName: !Join 
        - '-'
        - - 'codeguru-reviewer'
          - !Select 
            - 0
            - !Split 
              - '-'
              - !Select 
                - 2
                - !Split 
                  - '/'
                  - !Ref 'AWS::StackId'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # IAM Role for Lambda Function
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create a private S3 bucket for CodeGuru Reviewer'

Resources:
  # S3 Bucket Definition
  CodeGuruReviewerBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Join 
        - '-'
        - - 'codeguru-reviewer'
          - !Select 
            - 0
            - !Split 
              - '-'
              - !Select 
                - 2
                - !Split 
                  - '/'
                  - !Ref 'AWS::StackId'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # IAM Role for Lambda Function
  EmptyS3BucketLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:ListBucketVersions'
                  - 's3:DeleteObjectVersion'
                Resource:
                  - !Sub 'arn:aws:s3:::${CodeGuruReviewerBucket}'
                  - !Sub 'arn:aws:s3:::${CodeGuruReviewerBucket}/*'

  # Lambda Function to Empty S3 Bucket
  EmptyS3BucketLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Lambda function to empty S3 bucket during stack deletion'
      Handler: 'index.handler'
      Role: !GetAtt EmptyS3BucketLambdaRole.Arn
      Runtime: 'python3.9'
      Timeout: 300  # 5 minutes timeout to handle large buckets
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import os
          import time

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def empty_bucket(bucket_name):
              """
              Empty an S3 bucket including all versions of all objects
              """
              try:
                  logger.info(f"Starting to empty bucket: {bucket_name}")
                  s3 = boto3.resource('s3')
                  bucket = s3.Bucket(bucket_name)
                  
                  # Check if bucket exists
                  s3_client = boto3.client('s3')
                  try:
                      s3_client.head_bucket(Bucket=bucket_name)
                  except Exception as e:
                      logger.warning(f"Bucket {bucket_name} does not exist or cannot be accessed: {str(e)}")
                      return
                  
                  # Delete all object versions
                  logger.info(f"Deleting all object versions from {bucket_name}")
                  bucket.object_versions.delete()
                  
                  # Delete all objects
                  logger.info(f"Deleting all objects from {bucket_name}")
                  bucket.objects.all().delete()
                  
                  logger.info(f"Successfully emptied bucket: {bucket_name}")
                  return True
              except Exception as e:
                  logger.error(f"Error emptying bucket {bucket_name}: {str(e)}")
                  raise e

          def handler(event, context):
              """
              Lambda handler function
              """
              logger.info(f"Received event: {event}")
              
              # Extract properties from the event
              request_type = event['RequestType']
              physical_resource_id = event.get('PhysicalResourceId', None)
              
              # Set default response
              response_data = {}
              
              try:
                  # Get properties from the event
                  properties = event.get('ResourceProperties', {})
                  bucket_name = properties.get('BucketName', '')
                  old_bucket_name = event.get('OldResourceProperties', {}).get('BucketName', '') if request_type == 'Update' else ''
                  
                  if not bucket_name:
                      raise ValueError("BucketName property is required")
                  
                  # Handle different request types
                  if request_type == 'Delete':
                      logger.info(f"Stack deletion detected. Emptying bucket: {bucket_name}")
                      empty_bucket(bucket_name)
                      response_data['Message'] = f"Successfully emptied bucket {bucket_name} for deletion"
                  elif request_type == 'Update' and old_bucket_name and old_bucket_name != bucket_name:
                      logger.info(f"Bucket name change detected. Emptying old bucket: {old_bucket_name}")
                      empty_bucket(old_bucket_name)
                      response_data['Message'] = f"Successfully emptied old bucket {old_bucket_name} after name change"
                  else:
                      logger.info(f"No action needed for request type: {request_type}")
                      response_data['Message'] = "No action performed"
                  
                  # Send success response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_resource_id)
              
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  response_data['Error'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physical_resource_id)

  # Custom Resource to Invoke Lambda
  EmptyS3BucketCustomResource:
    Type: 'Custom::EmptyS3Bucket'
    Properties:
      ServiceToken: !GetAtt EmptyS3BucketLambda.Arn
      BucketName: !Join 
        - '-'
        - - 'codeguru-reviewer'
          - !Select 
            - 0
            - !Split 
              - '-'
              - !Select 
                - 2
                - !Split 
                  - '/'
                  - !Ref 'AWS::StackId'

Outputs:
  BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref CodeGuruReviewerBucket
  BucketARN:
    Description: 'ARN of the created S3 bucket'
    Value: !GetAtt CodeGuruReviewerBucket.Arn